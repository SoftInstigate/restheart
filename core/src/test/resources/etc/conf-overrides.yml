# RESTHeart configuration ovverrides for Integration Tests.

---
/http-listener/host: 0.0.0.0

/basicAuthMechanism/authenticator: fileRealmAuthenticator

/digestAuthMechanism/authenticator: fileRealmAuthenticator

/jwtAuthenticationMechanism/enabled: true
/jwtAuthenticationMechanism/rolesClaim: roles

/fileRealmAuthenticator:
  enabled: true
  users:
    - userid: admin
      password: secret
      roles: [user, admin]

    - userid: test
      password: secret
      roles: [ test ]

    - userid: testWithArray
      password: secret
      array: [ one, two, three ]
      roles: [ testWithArray ]

    - userid: testWithEmptyArray
      password: secret
      array: [ ]
      roles: [ testWithArray ]

    - userid: testWithNotExistingArray
      password: secret
      roles: [ testWithArray ]

    - userid: mongoPermissions
      password: secret
      roles: [mongoPermissions]

    - userid: user1
      password: secret
      roles: [poweruser]

    - userid: user2
      password: secret
      roles: [user]

    - userid: noroles
      password: secret
      roles: []

    - userid: full
      password: secret
      roles: [ full ]

    - userid: filtered
      password: secret
      roles: [ filtered ]

    - userid: both
      password: secret
      roles: [ filtered, full ]

/mongoRealmAuthenticator/users-db: restheart-test

/fileAclAuthorizer:
  enabled: true
  permissions:
    - role: admin
      predicate: path-prefix[path="/"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: $unauthenticated
      predicate: path-prefix[path="/testdb/refcoll1"] and method[value="GET"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: $unauthenticated
      predicate: path-prefix[path="/test-change-streams/anotherColl/_streams"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: $unauthenticated
      predicate: path-prefix[path="/test-change-streams/coll/_streams"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: poweruser
      predicate: path-prefix[path="/testdb"] and method[value="GET"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: poweruser
      predicate: path-prefix[path="/testmytmpdb"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: user
      predicate: path-prefix[path="/testdb/refcoll2"] and method[value="GET"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: user
      predicate: path[path="/testdb/refcoll2"] and method[value="GET"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: user
      predicate: (path[path="/testtmpdb2"] or path[path="/testtmpdb3"]) and method[value="PUT"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    # This to check the path-template predicate
    - role: user
      predicate: path-template[value="/testtmpdb2/{username}"] and equals[%u, "${username}"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    # This to check the regex predicate
    - role: user
      predicate: regex[pattern="/testtmpdb3/(.*?)", value="%R", full-match=true] and equals[%u, "${1}"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false

    - role: test
      # qparams-whitelist() === qparams-size(0)
      predicate: >
        method(GET)
        and qparams-size(2)
        and qparams-blacklist(size)
        and qparams-whitelist(filter, page, q1)
        and path[path="/secho"]
      priority: 0

    - role : test
      predicate: >
        method(GET)
        and qparams-whitelist(rep)
        and path-prefix[path="/test-predicates/coll"]
      mongo:
        projectResponse: >
          {"log": 0}
      priority: 100

    - role : test
      predicate: >
        method(GET)
        and qparams-whitelist(rep)
        and path-template(value="/test-predicates/coll/{id}")
      priority: 100

    - role: test
      predicate: >
        method(POST)
        and bson-request-contains(title)
        and bson-request-whitelist(title, content)
        and path-prefix[path="/test-predicates/coll"]
      mongo:
        mergeRequest: >
          {"author": "@user.userid", "status": "draft", "log": "@request"}
      priority: 100

    - role: test
      predicate: >
        method(PATCH)
        and path-template(value="/test-predicates/coll/{id}")
      mongo:
        mergeRequest: >
          {"author": "@user.userid", "status": "draft"}
      priority: 100

    - role: testWithArray
      predicate: >
        (method(PUT) or method(GET)) and path-template(value="/test-predicates/coll/{id}")
        and in(value=${id}, array=@user.array)
      priority: 100
      mongo:
        allowWriteMode: true

    # projectResponse
    - role : test
      predicate: >
        method(GET)
        and path-prefix[path="/test-predicates/projectResponse"]
      mongo:
        projectResponse: >
          {"user": 1}
      priority: 100


    - role : test
      predicate: >
        method(POST)
        and path-prefix[path="/test-predicates/projectResponse"]
      mongo:
        mergeRequest: >
          {"user" : "@user.userid"}
      priority: 100

    # mongo permissions
    - role: mongoPermissions
      predicate: path-prefix[path="/test-all-permissions"]
      priority: 0
      mongo:
          allowManagementRequests: true # default false
          allowBulkPatch: true          # default false
          allowBulkDelete: true         # default false
          allowWriteMode: true          # default false


    - role: mongoPermissions
      predicate: path-prefix[path="/test-no-permissions"]
      priority: 0

/mongoAclAuthorizer/acl-db: restheart-test
/mongoAclAuthorizer/cache-enabled: false

/mongo/mongo-mounts:
  - what: '*'
    where: /
  - what: '*'
    where: /remappedall
  - what: /testdb
    where: /remappeddb
  - what: /testdb/refcoll1
    where: /remappedrefcoll1
  - what: /testdb/refcoll2
    where: /remappedrefcoll2
  - what: /testdb/refcoll1/doc1
    where: /remappeddoc1
  - what: /testdb/refcoll2/doc2
    where: /remappeddoc2

/mongo/default-representation-format: HAL

/graphql/db: test-graphql
/graphql/verbose: true

/proxies:
 - location: /pecho
   proxy-pass: http://127.0.0.1:8080/echo
 - location: /piecho
   proxy-pass: http://127.0.0.1:8080/iecho
 - location: /anything
   proxy-pass: https://httpbin.org/anything

/testInitializer/enabled: true

/authTokenService/uri: /tokens

/ping/msg: 'Ping!'

/roles/uri: /roles

/echo/uri: /echo

/secho:
  uri: /secho
  enabled: true

/iecho:
  uri: /iecho
  enabled: true

/echoRequestInterceptor/enabled: true

/echoResponseInterceptor/enabled: true

/echoAsyncResponseInterceptor/enabled: true

/echoProxyRequestInterceptor/enabled: true

/echoProxyResponseInterceptor/enabled: true

/secretHider/enabled: true

/logMessageInitializer:
  enabled: false
  message: Hello World!
  log-level: INFO

/addBodyToWriteResponsesInitializer:
  enabled: false

/snooper:
  enabled: true

/writeResult:
  enabled: true

/logging/log-level: DEBUG
/core/name: integration-test